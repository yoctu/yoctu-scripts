#!/usr/bin/perl -w
#
# a2enmod by Stefan Fritsch <sf@debian.org>
# Licensed under Apache License 2.0
#
# The coding style is "perltidy -pbp"
#
# rewritten for flash haenconf / hadisconf

use strict;
use Cwd 'realpath';
use File::Spec;
use File::Basename;
use File::Path;
use Getopt::Long;

my $quiet;
my $force;
my $doreload;
my $dorestart;
my $dump;

my $basename = basename($0);
$basename =~ /^ha(en|dis)conf((?:-.+)?)$/
    or die "$basename call name unknown\n";

Getopt::Long::Configure('bundling');
GetOptions(
    'dump|D'     => \$dump,
    'quiet|q'     => \$quiet,
    'force|f'     => \$force,
    'reload|r'     => \$doreload,
    'restart|R'     => \$dorestart,
    'help|h'     => \&help
) or exit 2;

my $act        = $1;
my $obj        = "conf";

my $env_file = $ENV{HAPROXY_ENVVARS} || "/etc/default/haproxy";
$ENV{LANG} = 'C';

read_env_file($env_file);

$act .= 'able';
my ( $name, $dir, $sffx, $reload );
$obj    = 'conf';
$dir    = 'conf';
$sffx   = '.cfg';
$reload = 'reload';
$name = ucfirst($obj);

my $confdir = $ENV{HAPROXY_CONFDIR} || "/etc/haproxy";
my $conffile = $ENV{HAPROXY_CONFFILE} || $ENV{CONFIG} || "$confdir/haproxy.cfg";
my $availdir = "$confdir/$dir-available";
my $enabldir = "$confdir/$dir-enabled";

die ("$basename: $availdir: No such directory") unless -d $availdir;
die ("$basename: $enabldir: No such directory") unless -d $enabldir;

my $choicedir = $act eq 'enable' ? $availdir : $enabldir;
my $linkdir = File::Spec->abs2rel( $availdir, $enabldir );

if ($dump) {
    print "env_file: $env_file\nconfdir: $confdir\nconffile: $conffile\naction: $act\n";
    exit (0);
}

my $request_reload = 0;

my $rc = 0;

if ( !scalar @ARGV ) {
    my @choices = myglob('*');
    print "Your choices are: @choices\n";
    print "Which ${obj}(s) do you want to $act (wildcards ok)?\n";
    my $input = <>;
    @ARGV = split /\s+/, $input;

}

my @objs;
foreach my $arg (@ARGV) {
    $arg =~ s/${sffx}$//;
    my @glob = myglob($arg);
    if ($arg eq "none")
    {
        # do nothing, 
        # $request_reload=1 ?
    } elsif ( !@glob ) {
        error("No $obj found matching $arg!\n");
        $rc = 1;
    }
    else {
        push @objs, @glob;
    }
}

foreach my $acton (@objs) {
    doit($acton) or $rc = 1;
}


if ($request_reload || $force) {
    # FLASH generate config file, goret style
    # system ("{ echo -e '### XXX Generated file, DO NOT EDIT. see $enabldir/ and $0 XXX ###\n\n'; cat $enabldir/*; } > $conffile");

    write_config_file() or die ("$basename: Can't write config file.");

    if ($doreload) {
        system ("service haproxy reload");

    } elsif ($dorestart) {
        system ("service haproxy restart");

    } else {
        info("To activate the new configuration, you need to run:\n  service haproxy $reload\n");
    }
}

exit($rc);

##############################################################################

sub myglob {
    my $arg = shift;

    my @glob = map {
        s{^$choicedir/}{};
        s{$sffx$}{};
        $_
    } glob("$choicedir/$arg$sffx");

    return @glob;
}

sub doit {
    my $acton = shift;

    my ( $conftgt, $conflink );

    my $tgt  = "$availdir/$acton$sffx";
    my $link = "$enabldir/$acton$sffx";

    if ( !-e $tgt ) {
        if ( -l $link && !-e $link ) {
            if ( $act eq 'disable' ) {
                info("removing dangling symlink $link\n");
                unlink($link);

                # force a .conf path. It may exist as dangling link, too
                $conflink = "$enabldir/$acton.conf";

                if ( -l $conflink && !-e $conflink ) {
                    info("removing dangling symlink $conflink\n");
                    unlink($conflink);
                }

                return 1;
            }
            else {
                error("$link is a dangling symlink!\n");
            }
        }

        error("$name $acton does not exist!\n");
        return 0;
    }


    if ( $act eq 'enable' ) {
        my $check = check_link( $tgt, $link );
        if ( $check eq 'ok' ) {
            if ($conflink) {

                # handle .conf file
                my $confcheck = check_link( $conftgt, $conflink );
                if ( $confcheck eq 'ok' ) {
                    info("$name $acton already enabled\n");
                    return 1;
                }
                elsif ( $confcheck eq 'missing' ) {
                    print "Enabling config file $acton.conf.\n";
                    add_link( $conftgt, $conflink ) or return 0;
                }
                else {
                    error(
                        "Config file $acton.conf not properly enabled: $confcheck\n"
                    );
                    return 0;
                }
            }
            else {
                info("$name $acton already enabled\n");
                return 1;
            }
        }
        elsif ( $check eq 'missing' ) {
            if ($conflink) {

                # handle .conf file
                my $confcheck = check_link( $conftgt, $conflink );
                if ( $confcheck eq 'missing' ) {
                    add_link( $conftgt, $conflink ) or return 0;
                }
                elsif ( $confcheck ne 'ok' ) {
                    error(
                        "Config file $acton.conf not properly enabled: $confcheck\n"
                    );
                    return 0;
                }
            }

            return add_link( $tgt, $link );
        }
        else {
            error("$name $acton not properly enabled: $check\n");
            return 0;
        }
    }
    else {
        if ( -e $link || -l $link ) {
            remove_link($link);
            if ( $conflink && -e $conflink ) {
                remove_link($conflink);
            }
            print "$name $acton disabled.\n";
        }
        elsif ( $conflink && -e $conflink ) {
            print "Disabling stale config file $acton.conf.\n";
            remove_link($conflink);
        }
        else {
            info("$name $acton already disabled\n");
            return 1;
        }
    }

    return 1;
}


sub add_link {
    my ( $tgt, $link ) = @_;

    # create relative link
    if ( !symlink( File::Spec->abs2rel( $tgt, dirname($link) ), $link ) ) {
        die("Could not create $link: $!\n");
    }
    $request_reload = 1;
    return 1;
}

sub check_link {
    my ( $tgt, $link ) = @_;

    if ( !-e $link ) {
        if ( -l $link ) {

            # points to nowhere
            info("Removing dangling link $link");
            unlink($link) or die "Could not remove $link\n";
        }
        return 'missing';
    }

    if ( -e $link && !-l $link ) {
        return "$link is a real file, not touching it";
    }
    if ( realpath($link) ne realpath($tgt) ) {
        return "$link exists but does not point to $tgt, not touching it";
    }
    return 'ok';
}

sub remove_link {
    my ($link) = @_;

    if ( -l $link ) {
        unlink($link) or die "Could not remove $link: $!\n";
    }
    elsif ( -e $link ) {
        error("$link is not a symbolic link, not deleting\n");
        return 0;
    }
    $request_reload = 1;
    return 1;
}


sub info {
    print @_ if !$quiet;
}

sub error {
    print STDERR 'ERROR: ', @_;
}

sub warning {
    print STDERR 'WARNING: ', @_;
}

sub is_in {
    my $needle = shift;
    foreach my $e (@_) {
        return 1 if $needle eq $e;
    }
    return 0;
}

sub read_env_file {
    my $file = shift;

    -r $file or return;
    my @lines = qx{env - bash -c 'set -a; . $file && env'};
    if ($?) {
        die "Could not read $file\n";
    }

    foreach my $l (@lines) {
        chomp $l;
        $l =~ /^(.*)?=(.*)$/ or die "Could not parse $file\n";
        $ENV{$1} = $2;
    }
}

sub write_config_file {
    my ($inputHandle, $outputHandle);

    my $tmpFile = $conffile . ".tmp";
    my $bkFile = $conffile . ".bk";

    my @enabledConf = map {
        $_
    } glob("$enabldir/*$sffx");

    open $outputHandle, '>', $tmpFile or die ("$basename: Can't open $tmpFile for writing");

    print $outputHandle "### XXX Generated file, DO NOT EDIT. see $enabldir/ and $0 XXX ###\n\n";

    foreach my $file (@enabledConf) {
        open $inputHandle, '<', $file or die ("$basename: Can't open $file for reading");

        local $/ = undef;
        my $content = <$inputHandle>;
        print $outputHandle "\n## $file\n" . $content;
        close $inputHandle;

    }

    close $outputHandle;

    rename $conffile, $bkFile or die ("$basename: Can't mv $conffile $bkFile");
    rename $tmpFile, $conffile or die ("$basename: Can't mv $tmpFile $conffile");
}

sub help {
    die ("
  Usage: $basename [hrRq] [/path/to/][site]

          -D dump configuration (of this tool, not haproxy)
          -f force
          -h this help
          -r reload service
          -R restart service
          -q quiet

    to regenerate config without enabling or disabling anything, use $basename -f none
    see also: grep -F 'ENV{HAPROXY_' $0\n\n");
}

# vim: syntax=perl sw=4 sts=4 sr et
